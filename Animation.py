import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np

def niceFigure(useLatex=True):    
    from matplotlib import rcParams
    plt.rcParams.update({'font.size': 20})
    plt.rc('text.latex', preamble=r'\usepackage{amsmath}')
    if useLatex is True:
        plt.rcParams.update({
            "text.usetex": True,
            "font.family": "sans-serif",
            "font.sans-serif": "Helvetica",
        })
    rcParams['xtick.major.width'] = 1
    rcParams['ytick.major.width'] = 1
    return

class Animation():
    __fig_dpi = 180
    __axes_rect = [0.2, 0.15, 0.75, 0.75]  #[.18, .18, .33, .66]
    __use_tex = False #can use False if you do not have TeX installed
    __pause = False
    def __init__(self, t, x, data, V=None):
        self.t = t
        self.x = x
        self.data = data
        self.V = V

        niceFigure(self.__use_tex)
        self.__fig = plt.figure(dpi=self.__fig_dpi)
        self.__fig.canvas.mpl_connect('button_press_event', self.__on_click)
        self.__ax = self.__fig.add_axes(self.__axes_rect)
        self.__ax.set_xlabel(r'$x$ (a.u.)')
        self.__ax.set_ylabel(r'$|\Psi(x,t)|^2$ (a.u.)')

        self.__ax.set_xlim(x.min(), x.max())
        self.__ax.set_ylim(-1.2,1.2)
        if self.V is not None:
            self.__ax.set_ylim((V/V.max()).min()*1.5,1.2)
        self.__ax.set_title('Time: 0 a.u.')
        self.__line, = self.__ax.plot(x, data[0], 'b-', linewidth=1.5)
        if self.V is not None:
            self.__line2, = self.__ax.plot(x, V/V.max(), 'r-', linewidth=0.8, label='normalize potential')
            self.__ax.legend()
        self.__ax.grid()
        self.__round_to = int(-np.log10(self.t[1])) + 1
    def __on_click(self, event):
        self.__pause ^= True
        if self.__pause:
            self.animation.event_source.stop()
        else:
            self.animation.event_source.start()
    def __animate(self, frame):
        self.__line.set_data(self.x, self.data[frame])
        self.__ax.set_title(f'Time: {self.t[frame]:.{self.__round_to}f} a.u.')
        return self.__line,
    def run_animtion(self, animation_speed, save=None):
        """Create an animation using the data generated by run_TDSE, click mouse to stop

        Args:
            animation_speed (int, optional): 
                the number of data point per frame if it is positive,
                abs value equal the time interval between frame if it is negative. Defaults to 1.
            save (str, optional): the path to save gif file, do not save if it is None. Defaults to None.
            
        Returns: None
        """
        if animation_speed <= 0:
            if animation_speed < 0:
                interval = -animation_speed
            frame_spacing = 1
        else:
            interval = 1
            frame_spacing = animation_speed

        self.animation = animation.FuncAnimation(self.__fig, self.__animate, frames=range(1, len(self.t), frame_spacing),
                                    interval=interval, blit=False, repeat=False) 
        if save is not None:
            writer = animation.PillowWriter(fps=30)
            self.animation.save(save, writer=writer)

        plt.show()